// Generated by Haxe 3.4.1 (git build master @ 5c44548)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_input_touch_FlxTouch
#include <flixel/input/touch/FlxTouch.h>
#endif
#ifndef INCLUDED_flixel_input_touch_FlxTouchManager
#include <flixel/input/touch/FlxTouchManager.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxSpriteButton
#include <flixel/ui/FlxSpriteButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_FlxSprite
#include <flixel/ui/FlxTypedButton_flixel_FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_19_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",19,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_32_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",32,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_56_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",56,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_86_openImage,"PlayState","openImage",0x6ce152e0,"PlayState.openImage","PlayState.hx",86,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_127_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",127,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_138_keyboardControls,"PlayState","keyboardControls",0x87871e6e,"PlayState.keyboardControls","PlayState.hx",138,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_217_dragControls,"PlayState","dragControls",0xf9cef63b,"PlayState.dragControls","PlayState.hx",217,0xb30d7781)

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_19_new)
HXLINE( 310)		this->grid = ::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(2)->init(0,HX_("assets/images/scepterD.png",24,e2,2d,52))->init(1,HX_("Test Info",fc,a2,0e,75)));
HXLINE( 214)		this->picAngleOld = ((Float)0);
HXLINE( 213)		this->touchesAngle = ((Float)0);
HXLINE( 212)		this->touchesLength = ((Float)0);
HXLINE( 210)		this->picPosOld =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 209)		this->dragPos =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  29)		this->isSpritesheet = false;
HXLINE(  28)		this->curAnimPlaying = (int)0;
HXLINE(  27)		this->curOpen = (int)0;
HXLINE(  19)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x46c2835d;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_32_create)
HXLINE(  31)		 ::PlayState _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  34)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  37)		this->bigImage =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  38)		this->bigPreview =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  39)		this->bigImage->add(this->bigPreview).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  41)		int _hx_tmp = (::flixel::FlxG_obj::height - (int)70);
HXDLIN(  41)		this->imageText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,_hx_tmp,(::flixel::FlxG_obj::width - (int)6),HX_("Test Words",1b,61,0e,08),(int)18,null());
HXLINE(  42)		this->imageText->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  43)		this->imageText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  44)		this->bigImage->add(this->imageText).StaticCast<  ::flixel::FlxSprite >();
HXLINE(  46)		 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)10,(int)10,(int)0,HX_("Gallery - Press ESC to exit",3a,b5,07,53),(int)16,null());
HXLINE(  47)		this->add(text);
HXLINE(  49)		this->_grpThumbnails =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  50)		this->add(this->_grpThumbnails);
HXLINE(  52)		{
HXLINE(  52)			int _g1 = (int)0;
HXDLIN(  52)			int _g = this->grid->get_length();
HXDLIN(  52)			while((_g1 < _g)){
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,int,i) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_56_create)
HXLINE(  57)					_gthis->curOpen = i;
HXLINE(  58)					_gthis->isSpritesheet = false;
HXLINE(  60)					_gthis->openImage(_gthis->curOpen);
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  52)				_g1 = (_g1 + (int)1);
HXDLIN(  52)				int i = (_g1 - (int)1);
HXLINE(  54)				int gridPos = (((int)120 * hx::Mod(i,(int)4)) + (int)10);
HXDLIN(  54)				 ::flixel::math::FlxPoint gridPos1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,gridPos,(((int)120 * ::Std_obj::_hx_int(((Float)i / (Float)(int)4))) + (int)60));
HXLINE(  56)				 ::flixel::ui::FlxSpriteButton gridBG =  ::flixel::ui::FlxSpriteButton_obj::__alloc( HX_CTX ,gridPos1->x,gridPos1->y,null(), ::Dynamic(new _hx_Closure_0(_gthis,i)));
HXLINE(  62)				gridBG->makeGraphic((int)100,(int)100,null(),null(),null());
HXLINE(  63)				this->_grpThumbnails->add(gridBG).StaticCast<  ::flixel::ui::FlxSpriteButton >();
HXLINE(  65)				 ::flixel::FlxSprite gridThing =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,gridPos1->x,gridPos1->y,null());
HXLINE(  66)				gridThing->loadGraphic(this->grid->__get(i)->__GetItem((int)0),null(),null(),null(),null(),null());
HXLINE(  68)				int testSize = (int)90;
HXLINE(  69)				Float _hx_tmp1 = gridThing->get_width();
HXDLIN(  69)				if ((_hx_tmp1 > gridThing->get_height())) {
HXLINE(  70)					gridThing->setGraphicSize(testSize,null());
            				}
            				else {
HXLINE(  72)					gridThing->setGraphicSize((int)0,testSize);
            				}
HXLINE(  74)				gridThing->updateHitbox();
HXLINE(  75)				Float _hx_tmp2 = gridBG->getMidpoint(null())->x;
HXDLIN(  75)				Float _hx_tmp3 = (_hx_tmp2 - ((Float)gridThing->get_width() / (Float)(int)2));
HXDLIN(  75)				Float _hx_tmp4 = gridBG->getMidpoint(null())->y;
HXDLIN(  75)				gridThing->setPosition(_hx_tmp3,(_hx_tmp4 - ((Float)gridThing->get_height() / (Float)(int)2)));
HXLINE(  76)				this->add(gridThing);
            			}
            		}
HXLINE(  79)		this->add(this->bigImage);
HXLINE(  80)		this->bigImage->set_visible(false);
HXLINE(  82)		this->super::create();
            	}


void PlayState_obj::openImage(int i){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_86_openImage)
HXLINE(  87)		this->curAnimPlaying = (int)0;
HXLINE(  88)		this->bigImage->set_visible(true);
HXLINE(  89)		 ::flixel::FlxSprite _hx_tmp = this->bigPreview;
HXDLIN(  89)		_hx_tmp->loadGraphic(this->grid->__get(i)->__GetItem((int)0),null(),null(),null(),null(),null());
HXLINE(  91)		bool isAnimated = ( (bool)(this->grid->__get(i)->__GetItem((int)2)) );
HXLINE(  92)		int horizSize = ::Std_obj::_hx_int(this->bigPreview->get_width());
HXLINE(  93)		int vertSize = ::Std_obj::_hx_int(this->bigPreview->get_height());
HXLINE(  95)		bool _hx_tmp1;
HXDLIN(  95)		if (isAnimated) {
HXLINE(  95)			_hx_tmp1 = !(this->isSpritesheet);
            		}
            		else {
HXLINE(  95)			_hx_tmp1 = false;
            		}
HXDLIN(  95)		if (_hx_tmp1) {
HXLINE(  97)			isAnimated = true;
HXLINE(  98)			horizSize = ::Std_obj::_hx_int(((Float)horizSize / (Float)( (Float)(this->grid->__get(i)->__GetItem((int)3)) )));
HXLINE(  99)			vertSize = ::Std_obj::_hx_int(((Float)vertSize / (Float)( (Float)(this->grid->__get(i)->__GetItem((int)4)) )));
            		}
HXLINE( 102)		 ::flixel::FlxSprite _hx_tmp2 = this->bigPreview;
HXDLIN( 102)		_hx_tmp2->loadGraphic(this->grid->__get(i)->__GetItem((int)0),isAnimated,horizSize,vertSize,null(),null());
HXLINE( 105)		bool _hx_tmp3;
HXDLIN( 105)		if (isAnimated) {
HXLINE( 105)			_hx_tmp3 = !(this->isSpritesheet);
            		}
            		else {
HXLINE( 105)			_hx_tmp3 = false;
            		}
HXDLIN( 105)		if (_hx_tmp3) {
HXLINE( 107)			int _g1 = (int)0;
HXDLIN( 107)			int _g = ( (int)(this->grid->__get(i)->__GetItem((int)5)->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN( 107)			while((_g1 < _g)){
HXLINE( 107)				_g1 = (_g1 + (int)1);
HXDLIN( 107)				int a = (_g1 - (int)1);
HXLINE( 109)				 ::flixel::animation::FlxAnimationController _hx_tmp4 = this->bigPreview->animation;
HXDLIN( 109)				::String _hx_tmp5 = ( (::String)(this->grid->__get(i)->__GetItem((int)5)->__GetItem(a)->__GetItem((int)0)) );
HXDLIN( 109)				::Array< int > _hx_tmp6 = ( (::Array< int >)(this->grid->__get(i)->__GetItem((int)5)->__GetItem(a)->__GetItem((int)1)) );
HXDLIN( 109)				_hx_tmp4->add(_hx_tmp5,_hx_tmp6,this->grid->__get(i)->__GetItem((int)5)->__GetItem(a)->__GetItem((int)2),null(),null(),null());
HXLINE( 110)				 ::flixel::animation::FlxAnimationController _hx_tmp7 = this->bigPreview->animation;
HXDLIN( 110)				_hx_tmp7->play(( (::String)(this->grid->__get(i)->__GetItem((int)5)->__GetItem(a)->__GetItem((int)0)) ),null(),null(),null());
            			}
            		}
HXLINE( 114)		Float _hx_tmp8 = this->bigPreview->get_width();
HXDLIN( 114)		if ((_hx_tmp8 < this->bigPreview->get_height())) {
HXLINE( 115)			 ::flixel::FlxSprite _hx_tmp9 = this->bigPreview;
HXDLIN( 115)			_hx_tmp9->setGraphicSize((int)0,::Std_obj::_hx_int((::flixel::FlxG_obj::width * ((Float)0.75))));
            		}
            		else {
HXLINE( 117)			 ::flixel::FlxSprite _hx_tmp10 = this->bigPreview;
HXDLIN( 117)			_hx_tmp10->setGraphicSize(::Std_obj::_hx_int((::flixel::FlxG_obj::height * ((Float)0.75))),null());
            		}
HXLINE( 119)		this->bigPreview->updateHitbox();
HXLINE( 120)		this->bigPreview->screenCenter(null());
HXLINE( 122)		 ::flixel::text::FlxText _hx_tmp11 = this->imageText;
HXDLIN( 122)		_hx_tmp11->set_text(( (::String)(this->grid->__get(i)->__GetItem((int)1)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,openImage,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_127_update)
HXLINE( 129)		this->keyboardControls();
HXLINE( 132)		this->dragControls();
HXLINE( 134)		this->super::update(elapsed);
            	}


void PlayState_obj::keyboardControls(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_138_keyboardControls)
HXLINE( 140)		if ((::flixel::FlxG_obj::mouse->wheel != (int)0)) {
HXLINE( 142)			 ::flixel::FlxSprite _hx_tmp = this->bigPreview;
HXDLIN( 142)			Float _hx_tmp1 = this->bigPreview->get_width();
HXDLIN( 142)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((_hx_tmp1 + (::flixel::FlxG_obj::mouse->wheel * ((Float)1.5)))),null());
HXLINE( 143)			this->bigPreview->updateHitbox();
HXLINE( 144)			this->bigPreview->screenCenter(null());
            		}
HXLINE( 148)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 148)		if (_this->keyManager->checkStatus((int)27,_this->status)) {
HXLINE( 149)			 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 149)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 149)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 151)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 151)		if (_this1->keyManager->checkStatus((int)37,_this1->status)) {
HXLINE( 153)			if (( (bool)(this->grid->__get(this->curOpen)->__GetItem((int)2)) )) {
HXLINE( 155)				 ::PlayState _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 155)				_hx_tmp2->curAnimPlaying = (_hx_tmp2->curAnimPlaying - (int)1);
HXLINE( 156)				if ((this->curAnimPlaying < (int)0)) {
HXLINE( 158)					this->curAnimPlaying = ( (int)(this->grid->__get(this->curOpen)->__GetItem((int)5)->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXLINE( 159)					 ::PlayState _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 159)					_hx_tmp3->curAnimPlaying = (_hx_tmp3->curAnimPlaying - (int)1);
            				}
HXLINE( 161)				 ::flixel::animation::FlxAnimationController _hx_tmp4 = this->bigPreview->animation;
HXDLIN( 161)				_hx_tmp4->play(( (::String)(this->grid->__get(this->curOpen)->__GetItem((int)5)->__GetItem(this->curAnimPlaying)->__GetItem((int)0)) ),null(),null(),null());
            			}
            		}
HXLINE( 166)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 166)		if (_this2->keyManager->checkStatus((int)39,_this2->status)) {
HXLINE( 168)			if (( (bool)(this->grid->__get(this->curOpen)->__GetItem((int)2)) )) {
HXLINE( 170)				 ::PlayState _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 170)				_hx_tmp5->curAnimPlaying = (_hx_tmp5->curAnimPlaying + (int)1);
HXLINE( 171)				int _hx_tmp6 = this->curAnimPlaying;
HXDLIN( 171)				if ((_hx_tmp6 > (( (Float)(this->grid->__get(this->curOpen)->__GetItem((int)5)->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) ) - (int)1))) {
HXLINE( 173)					this->curAnimPlaying = (int)0;
            				}
HXLINE( 175)				 ::flixel::animation::FlxAnimationController _hx_tmp7 = this->bigPreview->animation;
HXDLIN( 175)				_hx_tmp7->play(( (::String)(this->grid->__get(this->curOpen)->__GetItem((int)5)->__GetItem(this->curAnimPlaying)->__GetItem((int)0)) ),null(),null(),null());
            			}
            		}
HXLINE( 179)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 179)		if (_this3->keyManager->checkStatus((int)69,_this3->status)) {
HXLINE( 181)			this->isSpritesheet = !(this->isSpritesheet);
HXLINE( 183)			this->openImage(this->curOpen);
            		}
HXLINE( 188)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 188)		if (_this4->keyManager->checkStatus((int)83,_this4->status)) {
HXLINE( 190)			 ::flixel::math::FlxPoint _g = this->bigPreview->offset;
HXDLIN( 190)			_g->set_y((_g->y + (int)10));
            		}
HXLINE( 192)		 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 192)		if (_this5->keyManager->checkStatus((int)87,_this5->status)) {
HXLINE( 194)			 ::flixel::math::FlxPoint _g1 = this->bigPreview->offset;
HXDLIN( 194)			_g1->set_y((_g1->y - (int)10));
            		}
HXLINE( 197)		 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 197)		if (_this6->keyManager->checkStatus((int)68,_this6->status)) {
HXLINE( 199)			 ::flixel::math::FlxPoint _g2 = this->bigPreview->offset;
HXDLIN( 199)			_g2->set_x((_g2->x + (int)10));
            		}
HXLINE( 202)		 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 202)		if (_this7->keyManager->checkStatus((int)65,_this7->status)) {
HXLINE( 204)			 ::flixel::math::FlxPoint _g3 = this->bigPreview->offset;
HXDLIN( 204)			_g3->set_x((_g3->x - (int)10));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyboardControls,(void))

void PlayState_obj::dragControls(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_217_dragControls)
HXLINE( 218)		bool pressingButton = false;
HXLINE( 219)		bool buttonJustPressed = false;
HXLINE( 220)		 ::flixel::math::FlxPoint buttonPos =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 223)		 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN( 223)		bool _hx_tmp;
HXDLIN( 223)		if ((_this->current != (int)1)) {
HXLINE( 223)			_hx_tmp = (_this->current == (int)2);
            		}
            		else {
HXLINE( 223)			_hx_tmp = true;
            		}
HXDLIN( 223)		if (_hx_tmp) {
HXLINE( 225)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == (int)2)) {
HXLINE( 227)				this->dragPos = ::flixel::FlxG_obj::mouse->getPosition(null());
HXLINE( 228)				buttonJustPressed = true;
            			}
HXLINE( 231)			pressingButton = true;
HXLINE( 232)			buttonPos = ::flixel::FlxG_obj::mouse->getPosition(null());
            		}
HXLINE( 250)		if (pressingButton) {
HXLINE( 252)			if (buttonJustPressed) {
HXLINE( 254)				this->picPosOld->set_x(this->bigPreview->offset->x);
HXLINE( 255)				this->picPosOld->set_y(this->bigPreview->offset->y);
            			}
HXLINE( 259)			Float xPos = (buttonPos->x - this->dragPos->x);
HXLINE( 260)			Float yPos = (buttonPos->y - this->dragPos->y);
HXLINE( 262)			 ::flixel::math::FlxPoint _hx_tmp1 = this->bigPreview->offset;
HXDLIN( 262)			_hx_tmp1->set_x((this->picPosOld->x - xPos));
HXLINE( 263)			 ::flixel::math::FlxPoint _hx_tmp2 = this->bigPreview->offset;
HXDLIN( 263)			_hx_tmp2->set_y((this->picPosOld->y - yPos));
            		}
HXLINE( 268)		if ((::flixel::FlxG_obj::touches->list->length == (int)2)) {
HXLINE( 270)			Float dx = (::flixel::FlxG_obj::touches->list->__get((int)0).StaticCast<  ::flixel::input::touch::FlxTouch >()->x - ::flixel::FlxG_obj::touches->list->__get((int)1).StaticCast<  ::flixel::input::touch::FlxTouch >()->x);
HXDLIN( 270)			Float dy = (::flixel::FlxG_obj::touches->list->__get((int)0).StaticCast<  ::flixel::input::touch::FlxTouch >()->y - ::flixel::FlxG_obj::touches->list->__get((int)1).StaticCast<  ::flixel::input::touch::FlxTouch >()->y);
HXDLIN( 270)			Float touchNew = ::Math_obj::sqrt(((dx * dx) + (dy * dy)));
HXLINE( 272)			int rads = (::flixel::FlxG_obj::touches->list->__get((int)0).StaticCast<  ::flixel::input::touch::FlxTouch >()->y - ::flixel::FlxG_obj::touches->list->__get((int)1).StaticCast<  ::flixel::input::touch::FlxTouch >()->y);
HXDLIN( 272)			Float rads1 = ::Math_obj::atan2(rads,(::flixel::FlxG_obj::touches->list->__get((int)0).StaticCast<  ::flixel::input::touch::FlxTouch >()->x - ::flixel::FlxG_obj::touches->list->__get((int)1).StaticCast<  ::flixel::input::touch::FlxTouch >()->x));
HXLINE( 276)			if ((::flixel::FlxG_obj::touches->list->__get((int)1).StaticCast<  ::flixel::input::touch::FlxTouch >()->input->current == (int)2)) {
HXLINE( 278)				this->touchesLength = touchNew;
HXLINE( 279)				this->touchesAngle = (rads1 * ((Float)(int)180 / (Float)::Math_obj::PI));
HXLINE( 280)				this->picAngleOld = this->bigPreview->angle;
            			}
HXLINE( 285)			Float degs = (rads1 * ((Float)(int)180 / (Float)::Math_obj::PI));
HXLINE( 286)			 ::flixel::FlxSprite _hx_tmp3 = this->bigPreview;
HXDLIN( 286)			_hx_tmp3->set_angle(((this->picAngleOld + degs) - this->touchesAngle));
HXLINE( 288)			 ::flixel::FlxSprite _hx_tmp4 = this->bigPreview;
HXDLIN( 288)			Float _hx_tmp5 = this->bigPreview->get_width();
HXDLIN( 288)			_hx_tmp4->setGraphicSize(::Std_obj::_hx_int((_hx_tmp5 + (touchNew - this->touchesLength))),null());
HXLINE( 289)			this->bigPreview->updateHitbox();
HXLINE( 290)			this->bigPreview->screenCenter(null());
HXLINE( 292)			if (((touchNew - this->touchesLength) >= (int)10)) {
HXLINE( 294)				 ::PlayState _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 294)				_hx_tmp6->touchesLength = (_hx_tmp6->touchesLength + (touchNew * ((Float)0.1)));
            			}
            			else {
HXLINE( 296)				if (((touchNew - this->touchesLength) <= (int)-10)) {
HXLINE( 298)					 ::PlayState _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 298)					_hx_tmp7->touchesLength = (_hx_tmp7->touchesLength - (touchNew * ((Float)0.1)));
            				}
            				else {
HXLINE( 301)					this->touchesLength = touchNew;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,dragControls,(void))


hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(bigImage,"bigImage");
	HX_MARK_MEMBER_NAME(_grpThumbnails,"_grpThumbnails");
	HX_MARK_MEMBER_NAME(bigPreview,"bigPreview");
	HX_MARK_MEMBER_NAME(imageText,"imageText");
	HX_MARK_MEMBER_NAME(curOpen,"curOpen");
	HX_MARK_MEMBER_NAME(curAnimPlaying,"curAnimPlaying");
	HX_MARK_MEMBER_NAME(isSpritesheet,"isSpritesheet");
	HX_MARK_MEMBER_NAME(dragPos,"dragPos");
	HX_MARK_MEMBER_NAME(picPosOld,"picPosOld");
	HX_MARK_MEMBER_NAME(touchesLength,"touchesLength");
	HX_MARK_MEMBER_NAME(touchesAngle,"touchesAngle");
	HX_MARK_MEMBER_NAME(picAngleOld,"picAngleOld");
	HX_MARK_MEMBER_NAME(grid,"grid");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bigImage,"bigImage");
	HX_VISIT_MEMBER_NAME(_grpThumbnails,"_grpThumbnails");
	HX_VISIT_MEMBER_NAME(bigPreview,"bigPreview");
	HX_VISIT_MEMBER_NAME(imageText,"imageText");
	HX_VISIT_MEMBER_NAME(curOpen,"curOpen");
	HX_VISIT_MEMBER_NAME(curAnimPlaying,"curAnimPlaying");
	HX_VISIT_MEMBER_NAME(isSpritesheet,"isSpritesheet");
	HX_VISIT_MEMBER_NAME(dragPos,"dragPos");
	HX_VISIT_MEMBER_NAME(picPosOld,"picPosOld");
	HX_VISIT_MEMBER_NAME(touchesLength,"touchesLength");
	HX_VISIT_MEMBER_NAME(touchesAngle,"touchesAngle");
	HX_VISIT_MEMBER_NAME(picAngleOld,"picAngleOld");
	HX_VISIT_MEMBER_NAME(grid,"grid");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"grid") ) { return hx::Val( grid ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curOpen") ) { return hx::Val( curOpen ); }
		if (HX_FIELD_EQ(inName,"dragPos") ) { return hx::Val( dragPos ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bigImage") ) { return hx::Val( bigImage ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"imageText") ) { return hx::Val( imageText ); }
		if (HX_FIELD_EQ(inName,"openImage") ) { return hx::Val( openImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"picPosOld") ) { return hx::Val( picPosOld ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bigPreview") ) { return hx::Val( bigPreview ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"picAngleOld") ) { return hx::Val( picAngleOld ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"touchesAngle") ) { return hx::Val( touchesAngle ); }
		if (HX_FIELD_EQ(inName,"dragControls") ) { return hx::Val( dragControls_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isSpritesheet") ) { return hx::Val( isSpritesheet ); }
		if (HX_FIELD_EQ(inName,"touchesLength") ) { return hx::Val( touchesLength ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_grpThumbnails") ) { return hx::Val( _grpThumbnails ); }
		if (HX_FIELD_EQ(inName,"curAnimPlaying") ) { return hx::Val( curAnimPlaying ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"keyboardControls") ) { return hx::Val( keyboardControls_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"grid") ) { grid=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curOpen") ) { curOpen=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dragPos") ) { dragPos=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"bigImage") ) { bigImage=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"imageText") ) { imageText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"picPosOld") ) { picPosOld=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bigPreview") ) { bigPreview=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"picAngleOld") ) { picAngleOld=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"touchesAngle") ) { touchesAngle=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isSpritesheet") ) { isSpritesheet=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touchesLength") ) { touchesLength=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_grpThumbnails") ) { _grpThumbnails=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curAnimPlaying") ) { curAnimPlaying=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bigImage","\x7b","\x1e","\xf6","\x72"));
	outFields->push(HX_HCSTRING("_grpThumbnails","\x8d","\xcb","\x00","\x60"));
	outFields->push(HX_HCSTRING("bigPreview","\x28","\xe7","\xfd","\x2d"));
	outFields->push(HX_HCSTRING("imageText","\xa8","\x61","\x2e","\x2f"));
	outFields->push(HX_HCSTRING("curOpen","\x6a","\x75","\xc9","\xb4"));
	outFields->push(HX_HCSTRING("curAnimPlaying","\xbd","\x07","\xa0","\x00"));
	outFields->push(HX_HCSTRING("isSpritesheet","\xb0","\xa4","\xb9","\x28"));
	outFields->push(HX_HCSTRING("dragPos","\x00","\xda","\x41","\xf1"));
	outFields->push(HX_HCSTRING("picPosOld","\x5d","\xc7","\x62","\x06"));
	outFields->push(HX_HCSTRING("touchesLength","\xb3","\xd6","\x66","\x24"));
	outFields->push(HX_HCSTRING("touchesAngle","\xa6","\xfa","\x22","\x76"));
	outFields->push(HX_HCSTRING("picAngleOld","\xfe","\x60","\x45","\xd8"));
	outFields->push(HX_HCSTRING("grid","\xc6","\xd6","\x6b","\x44"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::group::FlxTypedSpriteGroup*/ ,(int)offsetof(PlayState_obj,bigImage),HX_HCSTRING("bigImage","\x7b","\x1e","\xf6","\x72")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,_grpThumbnails),HX_HCSTRING("_grpThumbnails","\x8d","\xcb","\x00","\x60")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,bigPreview),HX_HCSTRING("bigPreview","\x28","\xe7","\xfd","\x2d")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(PlayState_obj,imageText),HX_HCSTRING("imageText","\xa8","\x61","\x2e","\x2f")},
	{hx::fsInt,(int)offsetof(PlayState_obj,curOpen),HX_HCSTRING("curOpen","\x6a","\x75","\xc9","\xb4")},
	{hx::fsInt,(int)offsetof(PlayState_obj,curAnimPlaying),HX_HCSTRING("curAnimPlaying","\xbd","\x07","\xa0","\x00")},
	{hx::fsBool,(int)offsetof(PlayState_obj,isSpritesheet),HX_HCSTRING("isSpritesheet","\xb0","\xa4","\xb9","\x28")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(PlayState_obj,dragPos),HX_HCSTRING("dragPos","\x00","\xda","\x41","\xf1")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(PlayState_obj,picPosOld),HX_HCSTRING("picPosOld","\x5d","\xc7","\x62","\x06")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,touchesLength),HX_HCSTRING("touchesLength","\xb3","\xd6","\x66","\x24")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,touchesAngle),HX_HCSTRING("touchesAngle","\xa6","\xfa","\x22","\x76")},
	{hx::fsFloat,(int)offsetof(PlayState_obj,picAngleOld),HX_HCSTRING("picAngleOld","\xfe","\x60","\x45","\xd8")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(PlayState_obj,grid),HX_HCSTRING("grid","\xc6","\xd6","\x6b","\x44")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("bigImage","\x7b","\x1e","\xf6","\x72"),
	HX_HCSTRING("_grpThumbnails","\x8d","\xcb","\x00","\x60"),
	HX_HCSTRING("bigPreview","\x28","\xe7","\xfd","\x2d"),
	HX_HCSTRING("imageText","\xa8","\x61","\x2e","\x2f"),
	HX_HCSTRING("curOpen","\x6a","\x75","\xc9","\xb4"),
	HX_HCSTRING("curAnimPlaying","\xbd","\x07","\xa0","\x00"),
	HX_HCSTRING("isSpritesheet","\xb0","\xa4","\xb9","\x28"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("openImage","\x31","\x8f","\x8e","\x30"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("keyboardControls","\x3d","\x7e","\x2f","\x2f"),
	HX_HCSTRING("dragPos","\x00","\xda","\x41","\xf1"),
	HX_HCSTRING("picPosOld","\x5d","\xc7","\x62","\x06"),
	HX_HCSTRING("touchesLength","\xb3","\xd6","\x66","\x24"),
	HX_HCSTRING("touchesAngle","\xa6","\xfa","\x22","\x76"),
	HX_HCSTRING("picAngleOld","\xfe","\x60","\x45","\xd8"),
	HX_HCSTRING("dragControls","\x8a","\x82","\x99","\xde"),
	HX_HCSTRING("grid","\xc6","\xd6","\x6b","\x44"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

